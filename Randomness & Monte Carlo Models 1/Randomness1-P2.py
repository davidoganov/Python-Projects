#=============================================================================
# Randomness and Monte Carlo Methods 1 - Problem 2
# Author: David Oganov
# April 16, 2023
#=============================================================================
import math
import random
import numpy as np
import matplotlib.pyplot as plt

# define mean and std dev
mean = 9
stdDev = 2

# generate list of 1000 random #'s in normal distribution using Box-Muller-Gauss method
tblGauss = []
for i in range(500):
    a = random.uniform(0, 2 * math.pi)
    b = stdDev * math.sqrt(-2 * math.log(random.random()))
    x = b * math.sin(a) + mean
    y = b * math.cos(a) + mean
    tblGauss.append(x)
    tblGauss.append(y)

# generate list of 1000 random #'s in normal distribution using numpy
tblGauss_np = np.random.normal(loc=mean, scale=stdDev, size=1000)

# create figure w/ two subplots
fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 4))

# plot histogram of the normal distribution generated by Box-Muller-Gauss method
axs[0].hist(tblGauss, bins=100, alpha=0.5, color='blue')
axs[0].set_xlim(min(tblGauss) - 1, max(tblGauss) + 1)
axs[0].set_ylim(0, 50)
axs[0].set_xlabel('Value')
axs[0].set_ylabel('Frequency')
axs[0].set_title('Histogram of Normal Distribution\n(Box-Muller-Gauss Method)', y=1.05)

# plot histogram of the normal distribution generated by numpy
axs[1].hist(tblGauss_np, bins=100, alpha=0.5, color='green')
axs[1].set_xlim(min(tblGauss_np) - 1, max(tblGauss_np) + 1)
axs[1].set_ylim(0, 50)
axs[1].set_xlabel('Value')
axs[1].set_ylabel('Frequency')
axs[1].set_title('Histogram of Normal Distribution\n(NumPy)', y=1.05)

# add main title 
fig.suptitle('Comparison of Two Methods for Generating a Normal Distribution', fontsize=14, y=1.1)

# add border between subplots
plt.subplots_adjust(wspace=0.3)

# adjust the layout of subplots
plt.tight_layout()
plt.show()
